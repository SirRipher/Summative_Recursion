# Summative_Recursion
It Finally works.


1. The difference in the Recursive code and the Iterative code is that the iterative code is longer and 
not put together the best, in the iterative code the lines after each other don't rely on what the line before was, the numbers are pre determined, and the iterative code will run 
until the play is set equal to false, the Recursive one will run untill all of the questions of how long the lines cshould be are all awnsered.

2. in the recursive code it will repeat the first 3 lines of code until the branchlen is smaller than ten, then it will start to do the side branches which awnser the questions in
the code causeing it to move on down the ist of code to awnser the next request, (in blue) and then it will go over the path again in red, and it will eventually skip an abundance
of the codebecause it has been awnsered already, it slowly awnsers all of the len 40, len 30, len 20, and len 10. Mine will check all of the if's and elifs to see which ones and
will go through with the ones which criteria it meats and will repeat this until it finally reaches the play = False to end the while loop at the start.

3.Recursion will continuouly ask questions that are awnsered by other questions untill it gets to the point where it haves one of the awnsers for the latest questions and then uses. it's a function that calls itself.
the awnser that it found to awnser the previous questions going up to the first question. Iteratively will check all of the if's and while loops for things it is able to do, and 
will continue to check for ones it can do until it has reached something to kill the while loop and end it.

Part 2
1.Recursion would be the best option when figuring out a math equation or, when you can make the smaller into a smaller problem or when it may have a surpluss of possibly branches. (https://betterprogramming.pub/when-to-loop-when-to-recurse-b786ad8977de#:~:text=When%20should%20I%20use%20recursion,complex%20for%20an%20iterative%20approach.) 

2.Iteration would be preffered over Recursion when you just have to have something be repeated (usually with low amounts of branches) because iteration is faster/more efficent than Recursion.it also has a "cost in stack space" based on your storage space.(https://stackoverflow.com/questions/3776035/is-there-ever-a-time-you-would-not-use-recursion)

3.Some specific examples of Recursion that would work for me are asking it a question like, what is 10 factorial which the code will go 10*9 times x, to figure out g it will multiply 9 * 8 times x, and this keeps going until it's 3 * 2 * 1 which is 6, Other thngs you can do is anything that requires the information to be slighty different than the information it's getting, such as making a square with smaller sides than the last, you can have the information be length of side is length of side - 5, this takes the information from the last side and subtracts 5 from it to give you the information for the new size.

 Small recursive example: Ex 

#
#Graden_Rusk
#It_works?
#Oct9_2021
#

import turtle#makes it so the turtle will work

t = turtle.Turtle()#makes t initiate the turtle import

branchlen = 100#makes branchlen equal to 100

t.left(45)#gets the curser in position (turns it left 45degrees)

#functions here
def Triangle_thing(branchlen):#names the function and brings in the branchlen
    if branchlen >= 5:#checks to see if branchlen is bigger than or equal to 5 (if so it plays this)
        t.forward(branchlen - 5)#goes forward branchlen -5 (95)
        t.right(120)#turns curser right 120 degrees
        branchlen = branchlen - 5#makes the new branchlen smaller by five to match the side it just made
        Triangle_thing(branchlen)#calls in the same function but with a smaller starting branchlen
    else:#itll do this if branchlen is smaller than 5
        t.forward(1)#moves forward 1

#main code here    
Triangle_thing(branchlen)#starts the function


    
#this will make a triangle appear on the screen with each side being smaller than the last by five untill eventually it cant go any smaller then it will go forward on and 
#end the function.


